{"version":3,"sources":["view/login/index.js","view/min/index.js","router.js","App.js","serviceWorker.js","index.js"],"names":["Login","props","show","console","log","contal","current","value","React","createRef","type","ref","this","onClick","Component","min","BasicRoute","exact","path","component","Min","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uQAQqBA,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAaVC,KAAO,WACJC,QAAQC,IAAI,EAAKC,OAAOC,QAAQC,QAb/B,EAAKF,OAASG,IAAMC,YAFL,E,0CAKnB,WACI,OACI,gCACI,wCACA,uBAAOC,KAAK,OAAOC,IAAKC,KAAKP,SAC7B,mBAAQK,KAAK,UAAUG,QAASD,KAAKV,KAArC,+D,GAXmBY,aCFdC,E,4JACjB,WACI,OACI,6C,GAHqBD,aCiBlBE,EAXI,kBACf,cAAC,IAAD,UACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWnB,IACjC,cAAC,IAAD,CAAOiB,OAAK,EAACC,KAAK,OAAOC,UAAWC,IACpC,cAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,SAASC,UAAWnB,UCT7BqB,E,4JACnB,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,U,GAJyBR,aCIbS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ee6c2240.chunk.js","sourcesContent":["\r\n\r\n\r\n\r\nimport React, { Component } from 'react';\r\nimport { Button } from 'antd';\r\n\r\n\r\nexport default class Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.contal = React.createRef();\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>longin</h1>\r\n                <input type='text' ref={this.contal}></input>\r\n                <Button type=\"primary\" onClick={this.show}>点击我提示数据</Button>\r\n            </div>\r\n        )\r\n    }\r\n    show = () => {\r\n       console.log(this.contal.current.value)\r\n    }\r\n}","\r\n\r\n\r\n\r\nimport React, { Component } from 'react';\r\n\r\nexport default class min extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                csdasd \r\n            </div>\r\n        )\r\n    }\r\n}","\r\n\r\nimport React from 'react';\r\n// import { BrowserRouter, Route, Switch, HashRouter } from 'react-router-dom';\r\nimport { Route, Switch, HashRouter } from 'react-router-dom';\r\nimport Login from './view/login';\r\nimport Min from './view/min';\r\n\r\n\r\n\r\n\r\n\r\nconst BasicRoute = () => (\r\n    <HashRouter>\r\n        <Switch>\r\n            <Route exact path='/' component={Login}></Route>\r\n            <Route exact path='/min' component={Min}></Route>\r\n            <Route exact path='/login' component={Login}></Route>\r\n\r\n        </Switch>\r\n    </HashRouter>\r\n);\r\n\r\nexport default BasicRoute;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\n// import { BrowserRouter as Router } from 'react-router-dom'\r\nimport Routers from './router';\r\n\r\n\r\n\r\n\r\nexport default class App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Routers />\r\n      </div>\r\n      // document.getElementById('root')\r\n    )\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}